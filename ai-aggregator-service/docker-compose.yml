version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-aggregator-postgres
    environment:
      POSTGRES_DB: ai_aggregator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-aggregator-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NATS Message Queue
  nats:
    image: nats:2-alpine
    container_name: ai-aggregator-nats
    ports:
      - "4222:4222"
      - "8222:8222"
    command: "--http_port 8222 --js"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: api-gateway
    container_name: ai-aggregator-api-gateway
    ports:
      - "8080:8080"
    environment:
      - AGG_SERVER_HOST=0.0.0.0
      - AGG_SERVER_PORT=8080
      - AGG_DATABASE_HOST=postgres
      - AGG_DATABASE_PORT=5432
      - AGG_DATABASE_USER=postgres
      - AGG_DATABASE_PASSWORD=postgres
      - AGG_DATABASE_DBNAME=ai_aggregator
      - AGG_REDIS_HOST=redis
      - AGG_REDIS_PORT=6379
      - AGG_NATS_URL=nats://nats:4222
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: auth-service
    container_name: ai-aggregator-auth-service
    ports:
      - "8081:8080"
    environment:
      - AGG_SERVER_HOST=0.0.0.0
      - AGG_SERVER_PORT=8080
      - AGG_DATABASE_HOST=postgres
      - AGG_DATABASE_PORT=5432
      - AGG_DATABASE_USER=postgres
      - AGG_DATABASE_PASSWORD=postgres
      - AGG_DATABASE_DBNAME=ai_aggregator
      - AGG_REDIS_HOST=redis
      - AGG_REDIS_PORT=6379
      - AGG_NATS_URL=nats://nats:4222
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy

  # Unified API Service
  unified-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: unified-api
    container_name: ai-aggregator-unified-api
    ports:
      - "8082:8080"
    environment:
      - AGG_SERVER_HOST=0.0.0.0
      - AGG_SERVER_PORT=8080
      - AGG_DATABASE_HOST=postgres
      - AGG_DATABASE_PORT=5432
      - AGG_DATABASE_USER=postgres
      - AGG_DATABASE_PASSWORD=postgres
      - AGG_DATABASE_DBNAME=ai_aggregator
      - AGG_REDIS_HOST=redis
      - AGG_REDIS_PORT=6379
      - AGG_NATS_URL=nats://nats:4222
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy

  # Provider Router
  provider-router:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: provider-router
    container_name: ai-aggregator-provider-router
    ports:
      - "8083:8080"
    environment:
      - AGG_SERVER_HOST=0.0.0.0
      - AGG_SERVER_PORT=8080
      - AGG_DATABASE_HOST=postgres
      - AGG_DATABASE_PORT=5432
      - AGG_DATABASE_USER=postgres
      - AGG_DATABASE_PASSWORD=postgres
      - AGG_DATABASE_DBNAME=ai_aggregator
      - AGG_REDIS_HOST=redis
      - AGG_REDIS_PORT=6379
      - AGG_NATS_URL=nats://nats:4222
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-aggregator-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-aggregator-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployments/docker/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: